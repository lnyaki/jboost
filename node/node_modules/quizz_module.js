
var Quizz = function(){

	/************************************************
	*         Incoming message types
	************************************************/
	//lobby
	var ENTER_LOBBY		= 'enter_lobby';
	var LEAVE_LOBBY		= 'leave_lobby';
	var LOBBY_INFO		= 'lobby_info';
	//Quizz
	var CREATE_QUIZZ	= 'create_quizz';
	var JOIN_QUIZZ		= 'join_quizz';
	var LEAVE_QUIZZ		= 'leave_quizz';
	var VALIDATE_ANSWER = 'validate';
	//USER
	var NEW_USER		= 'new_user';
	//variables
	var rooms;
	var lobbies	;
	
	/************************************************
	*         Outgoing message types
	************************************************/
	var Quizz_Server = function(){
		this.rooms		= new Array();
		this.lobbies	= new Array();
		console.log("IN CONSTRUCTOR");
		console.log(this.lobbies);
		console.log(this);
	};


	Quizz_Server.prototype = function(){
		var constructor = Quizz_Server;
		var http 		= require('http');
		var fs 			= require('fs');
		var io;
		var server;
		var self;

		var last_game_id	= 0;

		console.log("***** Lobbies ******");
		console.log(this.lobbies);


		var initialize_server 		= function(port){	 
			 //create the server object
			 server = http.createServer(function(req, res){
			 	fs.readFile('./quizz_client.html', 'utf-8', function(error, content) {
        		res.writeHead(200, {"Content-Type": "text/html"});
        		res.end(content);
     			});
			 });
			 
			 //listen on the chosen port
			 io = require('socket.io').listen(server);
			 //set listening port
			 server.listen(port);
		};
	
	//when a user enters a lobby
		var player_enters_lobby 	= function(lobby_ref,user_ref){
			console.log(user_ref+' enters in lobby : '+lobby_ref);
		};
		
		var player_leaves_lobby		= function(lobby_ref, user_ref){
			
		};

		var player_creates_quizz	= function(lobby_ref, user_ref, option){
			
		};
		
		var player_joins_quizz		= function(lobby_ref, quizz_ref,user_ref){
			
		};

		var player_leaves_quizz 	= function(lobby_ref, quizz_ref,user_ref){

		};

		var create_room				= function(room_name){
			this.rooms.push(room_name);
		};
		
		var create_lobby			= function(lobby){
			this.lobbies.push(lobby);
			console.log("---------- CREATE LOBBY -------------");
			console.log(this.lobbies);
		};

		var get_lobbies_data		= function(){
				var lobbies_data = new Array();
				console.log("------------ boulce lobbies ----------- ");
				console.log(this.lobbies);
				for(elt in this.lobbies){
					lobbies_data.push(this.lobbies[elt].get_players_data());
				}
				console.log("------------- Total lobbies data ------------");
				console.log(lobbies_data);
				return lobbies_data;
		};
		
		var events_handling			= function(){
			console.log("----------- dans events handling --------------");
			
			var toto = this;
			
			console.log(this);
			
			//on connection
			io.sockets.on('connection',function(socket){
				console.log("* User connected");
				//socket.emit('message'," Ã§a marche?");
				
				socket.on('message',function(message){
					console.log("User says : "+message);	
				});
				
			
				//player enters a lobby
				socket.on(ENTER_LOBBY,function(data){
					player_enters_lobby(data.lobby, data.user);
				});
			

				
				//on connection, we display the lobbies data
				console.log("************** lobbies data **************");
				console.log(toto.get_lobbies_data());
				socket.emit(LOBBY_INFO, toto.get_lobbies_data());
				
				//Create new user
				socket.on(NEW_USER,function(username,lobby_ref){
					console.log("------------- LOBBIES & ROOMS -----------");
					console.log(toto.lobbies);
					console.log(toto.rooms);
					var lobby = toto.get_lobby(lobby_ref);
					//console.log(this);
					if(lobby != null){
						//add player in the player list of the lobby
						lobby.add_player(username);
						//add player to the room of the lobby
						socket.join(lobby);
					}
					else{
						console.log("Lobby "+lobby_ref+" could not be found. No player added");
					}
					
					socket.broadcast.emit(LOBBY_INFO, toto.get_lobbies_data());
					socket.emit(LOBBY_INFO, toto.get_lobbies_data());
				});
			});
				
		};
		
		//return a lobby element based on its reference
		var get_lobby				= function(reference){
			var lobby;
			var found 	= false;
			var exit 	= false;
			var i		= 0;
			var max		= this.lobbies.length;
			while(!exit){
				lobby	= this.lobbies[i];

				if(lobby.get_reference() == reference){
					found 	= true;
					exit 	= true;
				}
				else{
					i++;
					if(i >= max){
						exit = true;
					}
				}
			}
			
			if(found){
				return lobby;
			}
			else{
				return null;
			}
		};
		
		var get_io 					= function(){
			return io;
		};
		
		return{
			events_handling			: events_handling
			,initialize_server		: initialize_server
			,player_enters_lobby 	: player_enters_lobby
			,player_leaves_lobby	: player_leaves_lobby
			,player_creates_quizz 	: player_creates_quizz
			,player_joins_quizz 	: player_joins_quizz
			,player_leaves_quizz	: player_leaves_quizz
			,get_io					: get_io
			,create_room			: create_room
			,create_lobby			: create_lobby
			,get_lobbies_data		: get_lobbies_data
			,get_lobby				: get_lobby
		};
	}();
	
	return{
		Quizz_Server : Quizz_Server
	};
}();

module.exports	= Quizz;