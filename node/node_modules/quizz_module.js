
var Quizz = function(){

	/************************************************
	*         Incoming message types
	************************************************/
	//lobby
	var ENTER_LOBBY		= 'enter_lobby';
	var LEAVE_LOBBY		= 'leave_lobby';
	var LOBBY_INFO		= 'lobby_info';
	//Quizz
	var CREATE_QUIZZ	= 'create_quizz';
	var JOIN_QUIZZ		= 'join_quizz';
	var LEAVE_QUIZZ		= 'leave_quizz';
	var VALIDATE_ANSWER = 'validate';
	//USER
	var NEW_USER		= 'new_user';
	//variables
	var rooms;
	var lobbies;
	var games;
	var players;
	
	/************************************************
	*         Outgoing message types
	************************************************/
	var Quizz_Server = function(){
		this.rooms		= new Array();
		this.lobbies	= new Array();
		this.players 	= new Array();
		this.games		= new Array();
		console.log("IN CONSTRUCTOR");
		console.log(this.lobbies);
		console.log(this);
	};


	Quizz_Server.prototype = function(){
		var constructor = Quizz_Server;
		var http 		= require('http');
		var fs 			= require('fs');
		var Quizz 		= require('Quizz_Game').Quizz;
		var Player		= require('Player').Player;
		var io;
		var server;
		var self;

		var last_game_id	= 0;

		var initialize_server 		= function(port){	 
			 //create the server object
			 server = http.createServer(function(req, res){
			 	fs.readFile('./quizz_client.html', 'utf-8', function(error, content) {
        		res.writeHead(200, {"Content-Type": "text/html"});
        		res.end(content);
     			});
			 });
			 
			 //listen on the chosen port
			 io = require('socket.io').listen(server);
			 //set listening port
			 server.listen(port);
			 
			 
		};
	
	//when a user enters a lobby
		var player_enters_lobby 	= function(lobby,player){
			var lobby_ref = lobby.get_reference();
			
			//add the player to the general server player list
			self.players[player.get_reference()] = player;
			
			//set the lobby to this user
			player.set_lobby(lobby);

			//add player in the player list of the lobby
			lobby.add_player(player);

			//add player to the room of the lobby  <--- done in the lobby object now
		///	socket.join(lobby_ref);
			
			//Emit information to update the view of the players in this room
			io.to(lobby_ref).emit(LOBBY_INFO, self.get_lobbies_data());			
		};
		
		var player_leaves_lobby		= function(lobby_ref, user_ref){
			
		};

		var player_creates_quizz	= function(lobby_ref, user_ref, option){
			
		};
		
		var player_joins_quizz		= function(quizz,lobby_ref,user){
			//add the player to the game
			quizz.add_player(user);
			
			//remove the player from the lobby
			self.lobbies[lobby_ref].remove_player(user.get_reference());
		};

		var player_leaves_quizz 	= function(lobby_ref, quizz_ref,user_ref){

		};

		var create_room				= function(room_name){
			this.rooms.push(room_name);
		};
		
		var create_lobby			= function(lobby){
			lobby.set_io(io);
			this.lobbies[lobby.get_reference()] = lobby;
		};

		var create_game				= function(io,lobbyref,data){
			var game = new Quizz(io,lobbyref,data);
	
			self.games[game.get_reference()] = game;
			
			console.log("--------- Game created -----------");
			console.log(game.get_reference());
			
			return game;
		};
		
		var add_game_to_lobby 		= function(game,lobbyref){
			console.log("Lobby reference : "+lobbyref);
			console.log(self.lobbies);
			var lobby  = self.lobbies[lobbyref];
			if(lobby != undefined){
				//add the game to the lobby object
				lobby.add_game(game);
			}
			else {
				console.log("* The lobby ["+lobbyref+"] could not be found.");
			}
			
		};

		var get_lobbies_data		= function(){
				var lobbies_data = new Array();
				var data ;
				var tmp;
				for(elt in this.lobbies){
					tmp = this.lobbies[elt];
					data = tmp.get_players_data();
					data.games = tmp.get_games_data();
					console.log("----- Games data : -------");
					console.log(data.games);
					lobbies_data.push(data);
				}

				return lobbies_data;
		};
		//return a lobby element based on its reference
		var get_lobby	= function(reference){
			var lobby = this.lobbies[reference];
			if(lobby != undefined){
				console.log("Lobby found : ");
				console.log(lobby.get_reference());
			}
			else{
				console.log("Can't find lobby : "+reference);
			}
			return lobby;
		};
	
		
		var get_game			= function(reference){
			var game = this.games[reference];
			
			console.log(this.games);
			if(game != undefined){
				console.log("* Game found : ");
				console.log(game.get_reference());
			}
			else{
				console.log("* Can't find game : "+reference);
			}
			return game;
		};
		
		var get_player			= function(){
			
		};
		
		var get_io 					= function(){
			return io;
		};
		
		var events_handling			= function(){
			console.log("----------- dans events handling --------------");
			
			var toto = this;
			self = this;
			
			console.log(this);
			
			//on connection
			io.sockets.on('connection',function(socket){

				socket.emit(LOBBY_INFO, toto.get_lobbies_data());
				
 				socket.on('disconnection',function(){
 					//player_disconnects();
 					console.log("DÃ©connection d'un joueur");
 				});
				
				socket.on('message',function(message){
					console.log("User says : "+message);	
				});
				
				//Create new user
				socket.on(NEW_USER,function(username,user_ref, lobby_ref){
					console.log("------------- LOBBIES & ROOMS -----------");
					console.log(toto.lobbies);
					console.log(toto.rooms);
					//get the lobby and player object.
					var lobby = toto.get_lobby(lobby_ref);
					var user 	= new Player(socket,username);

					if(lobby != null){
						//add the player to the lobby
						player_enters_lobby(lobby, user);
					}
					else{
						console.log("Lobby "+lobby_ref+" could not be found. No player added");
					}			

				});
				
				socket.on('create game',function(data){
					var lobbyref = 'Lobby 1';
					
					console.log("ON CREATE GAME");
					
					//create the game
					var game = create_game(io,lobbyref,{});
					
					console.log("---- User reference : "+data.uref);
					//add the player to the game
					player_joins_quizz(game,lobbyref,self.players[data.uref]);
					
					
					
					//add the game to the lobby
					add_game_to_lobby(game,lobbyref);
					console.log("--- Game players -----");
					console.log("- Game : "+game.get_name());
					console.log("- Game reference : "+game.get_reference());
					
					//send the game reference to the user
					socket.emit('game_reference',{gref : game.get_reference()});
					
					io.to(lobbyref).emit(LOBBY_INFO, self.get_lobbies_data());	
					//create room
					//socket.join(game.get)
				});
				
				socket.on('QUIZZ',function(data){
					//	console.log("--- Data recieved ----");
					//console.log(data);
					
					//get the game reference
					var game_reference 	= data.gref;
					//get user reference
					var user_reference = data.uref;
					
					//get the the user
					var user = self.players[user_reference];
					console.log("User : "+user.get_name());
				
					//add information to the data object 
					data.user		= user;
					
					var lobby 	= user.get_lobby();
					//get the corresponding game
					var game		= lobby.get_game(game_reference);
					
					if(game != undefined){
						game.on(io,socket,data);
					}
					else{
						console.log("[Lobby "+lobby.get_name()+"]Could not find the game : "+game_reference);
					}
				});
			});
		};
		

		
		return{
			events_handling			: events_handling
			,initialize_server		: initialize_server
			,player_enters_lobby 	: player_enters_lobby
			,player_leaves_lobby	: player_leaves_lobby
			,player_creates_quizz 	: player_creates_quizz
			,player_joins_quizz 	: player_joins_quizz
			,player_leaves_quizz	: player_leaves_quizz
			,add_game_to_lobby		: add_game_to_lobby
			,get_io					: get_io
			,create_room			: create_room
			,create_lobby			: create_lobby
			,create_game			: create_game
			,get_lobbies_data		: get_lobbies_data
			,get_lobby				: get_lobby
			,get_player				: get_player
			,get_game				: get_game
		};
	}();
	
	return{
		Quizz_Server : Quizz_Server
	};
}();

module.exports	= Quizz;